// ============================
// YOUTUBE SUMMARIZER - VERSION CORRIG√âE
// ============================

console.log('üîÑ Chargement du script YouTube Summarizer...');

class YouTubeSummarizer {
    constructor() {
        console.log('üèóÔ∏è Initialisation de YouTubeSummarizer...');
        
        this.successCount = parseInt(localStorage.getItem('successCount') || '0');
        this.totalAttempts = parseInt(localStorage.getItem('totalAttempts') || '0');
        this.lastMethod = localStorage.getItem('lastMethod') || 'Aucune';
        
        // Attendre que le DOM soit pr√™t
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    init() {
        console.log('üîç Recherche des √©l√©ments DOM...');
        
        // Recherche des √©l√©ments avec debug
        this.urlInput = document.getElementById('youtubeUrl');
        this.summarizeBtn = document.getElementById('summarizeBtn');
        this.loading = document.getElementById('loading');
        this.result = document.getElementById('result');
        this.summaryText = document.getElementById('summaryText');
        this.error = document.getElementById('error');
        
        // Debug des √©l√©ments trouv√©s
        console.log('üìã √âl√©ments trouv√©s:');
        console.log('- URL Input:', this.urlInput ? '‚úÖ' : '‚ùå');
        console.log('- Button:', this.summarizeBtn ? '‚úÖ' : '‚ùå');
        console.log('- Loading:', this.loading ? '‚úÖ' : '‚ùå');
        console.log('- Result:', this.result ? '‚úÖ' : '‚ùå');
        console.log('- Summary Text:', this.summaryText ? '‚úÖ' : '‚ùå');
        console.log('- Error:', this.error ? '‚úÖ' : '‚ùå');
        
        // Si les √©l√©ments manquent, cr√©er une interface de base
        if (!this.urlInput || !this.summarizeBtn) {
            console.log('‚ùå √âl√©ments manquants - Cr√©ation automatique de l\'interface');
            this.createBasicInterface();
            return;
        }
        
        // Event listeners avec debug
        console.log('üîó Ajout des event listeners...');
        
        this.summarizeBtn.addEventListener('click', (e) => {
            console.log('üî• Bouton cliqu√© !');
            e.preventDefault();
            this.handleSummarize();
        });
        
        this.urlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                console.log('‚å®Ô∏è Entr√©e press√©e !');
                e.preventDefault();
                this.handleSummarize();
            }
        });
        
        this.updateStats();
        window.youtubeSummarizer = this;
        
        console.log('‚úÖ YouTubeSummarizer initialis√© avec succ√®s !');
        this.showToast('‚úÖ Application pr√™te !');
    }
    
    createBasicInterface() {
        console.log('üèóÔ∏è Cr√©ation de l\'interface de base...');
        
        // Injecter les styles d'abord
        this.injectStyles();
        
        // Cr√©er une interface compl√®te
        document.body.innerHTML = `
            <div class="container">
                <header class="header">
                    <h1>üéØ YouTube Summarizer</h1>
                    <p>Analysez et r√©sumez vos vid√©os YouTube instantan√©ment</p>
                </header>
                
                <div class="input-section">
                    <input type="url" id="youtubeUrl" placeholder="https://www.youtube.com/watch?v=..." class="url-input">
                    <button id="summarizeBtn" class="summarize-btn">
                        <span>üöÄ R√©sumer</span>
                    </button>
                </div>
                
                <div id="loading" class="loading hidden">
                    <div class="spinner"></div>
                    <p id="loadingMessage">üîÑ Chargement...</p>
                </div>
                
                <div id="result" class="result hidden">
                    <h3>üìã R√©sum√© g√©n√©r√©</h3>
                    <div id="summaryText" class="summary-text"></div>
                    <div class="action-buttons">
                        <button onclick="copyToClipboard()" class="btn btn-copy">üìã Copier</button>
                        <button onclick="downloadSummary()" class="btn btn-download">üíæ T√©l√©charger</button>
                        <button onclick="newSummary()" class="btn btn-new">üîÑ Nouveau</button>
                    </div>
                </div>
                
                <div id="error" class="error hidden">
                    <h3>‚ùå Une erreur s'est produite</h3>
                    <div id="errorMessage">Erreur inconnue</div>
                    <button onclick="window.youtubeSummarizer.handleSummarize()" class="btn btn-retry">üîÑ R√©essayer</button>
                </div>
                
                <div class="demo-links">
                    <h4>üí° Testez avec ces exemples :</h4>
                    <div class="demo-buttons">
                        <button onclick="testWithDemo(1)" class="demo-btn">Vid√©o Tech</button>
                        <button onclick="testWithDemo(2)" class="demo-btn">Tutoriel</button>
                        <button onclick="testWithDemo(3)" class="demo-btn">Conf√©rence</button>
                    </div>
                </div>
                
                <footer class="footer">
                    <p>Version de d√©monstration - Fonctionne avec simulation</p>
                </footer>
            </div>
        `;
        
        // R√©-initialiser avec la nouvelle interface
        setTimeout(() => {
            this.init();
        }, 100);
    }
    
    injectStyles() {
        const styles = `
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: #333;
            }
            
            .container {
                max-width: 900px;
                margin: 0 auto;
                padding: 20px;
            }
            
            .header {
                text-align: center;
                background: white;
                padding: 30px;
                border-radius: 15px;
                margin-bottom: 20px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            }
            
            .header h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
                background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }
            
            .header p {
                color: #666;
                font-size: 1.1em;
            }
            
            .input-section {
                background: white;
                padding: 25px;
                border-radius: 15px;
                margin-bottom: 20px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                display: flex;
                gap: 15px;
                flex-wrap: wrap;
            }
            
            .url-input {
                flex: 1;
                min-width: 300px;
                padding: 15px;
                border: 2px solid #e1e5e9;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s ease;
            }
            
            .url-input:focus {
                outline: none;
                border-color: #4ecdc4;
                box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.1);
            }
            
            .summarize-btn {
                padding: 15px 30px;
                background: linear-gradient(45deg, #ff6b6b, #ee5a52);
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                min-width: 140px;
            }
            
            .summarize-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(238, 90, 82, 0.3);
            }
            
            .summarize-btn:active {
                transform: translateY(0);
            }
            
            .summarize-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            
            .loading {
                background: white;
                padding: 40px;
                border-radius: 15px;
                text-align: center;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            }
            
            .spinner {
                width: 50px;
                height: 50px;
                border: 4px solid #f3f3f3;
                border-top: 4px solid #4ecdc4;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 0 auto 20px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .result {
                background: white;
                padding: 30px;
                border-radius: 15px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                margin-bottom: 20px;
            }
            
            .result h3 {
                color: #333;
                margin-bottom: 20px;
                font-size: 1.5em;
            }
            
            .summary-text {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                line-height: 1.6;
                white-space: pre-line;
                max-height: 400px;
                overflow-y: auto;
                margin-bottom: 20px;
                border-left: 4px solid #4ecdc4;
            }
            
            .action-buttons {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }
            
            .btn {
                padding: 10px 20px;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn-copy {
                background: #28a745;
                color: white;
            }
            
            .btn-download {
                background: #17a2b8;
                color: white;
            }
            
            .btn-new {
                background: #6c757d;
                color: white;
            }
            
            .btn-retry {
                background: #ffc107;
                color: #333;
            }
            
            .btn:hover {
                transform: translateY(-1px);
                opacity: 0.9;
            }
            
            .error {
                background: #f8d7da;
                color: #721c24;
                padding: 25px;
                border-radius: 15px;
                border-left: 5px solid #dc3545;
            }
            
            .demo-links {
                background: white;
                padding: 25px;
                border-radius: 15px;
                margin-bottom: 20px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                text-align: center;
            }
            
            .demo-links h4 {
                margin-bottom: 15px;
                color: #333;
            }
            
            .demo-buttons {
                display: flex;
                gap: 10px;
                justify-content: center;
                flex-wrap: wrap;
            }
            
            .demo-btn {
                padding: 8px 16px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-size: 14px;
                transition: all 0.3s ease;
            }
            
            .demo-btn:hover {
                transform: translateY(-1px);
                opacity: 0.9;
            }
            
            .footer {
                text-align: center;
                color: white;
                padding: 20px;
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .hidden {
                display: none !important;
            }
            
            .toast {
                position: fixed;
                top: 20px;
                right: 20px;
                background: #333;
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                z-index: 10000;
                font-weight: 500;
                box-shadow: 0 8px 25px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease-out;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @media (max-width: 768px) {
                .container {
                    padding: 10px;
                }
                
                .input-section {
                    padding: 20px;
                }
                
                .url-input {
                    min-width: 100%;
                }
                
                .demo-buttons {
                    justify-content: center;
                }
                
                .action-buttons {
                    justify-content: center;
                }
            }
        `;
        
        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    }
    
    async handleSummarize() {
        console.log('üöÄ D√©but de l\'analyse...');
        
        const url = this.urlInput.value.trim();
        console.log('üìù URL saisie:', url);
        
        if (!url) {
            console.log('‚ùå URL vide');
            this.showToast('‚ùå Veuillez entrer une URL YouTube');
            return;
        }
        
        const videoId = this.extractVideoId(url);
        console.log('üé¨ Video ID extraite:', videoId);
        
        if (!videoId) {
            console.log('‚ùå Video ID invalide');
            this.showToast('‚ùå URL YouTube invalide');
            return;
        }
        
        this.totalAttempts++;
        this.saveStats();
        
        // D√©sactiver le bouton
        this.summarizeBtn.disabled = true;
        this.summarizeBtn.innerHTML = '<span>‚è≥ Analyse...</span>';
        
        this.showLoading('üîÑ Recherche de sous-titres...');
        
        try {
            console.log('üì° Tentative de r√©cup√©ration du transcript...');
            
            // Simuler la recherche de transcript
            await this.simulateTranscriptSearch();
            
            this.showLoading('üìù G√©n√©ration du r√©sum√©...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const summary = this.generateAdvancedSummary(url, videoId);
            console.log('‚úÖ R√©sum√© g√©n√©r√©');
            
            this.successCount++;
            this.lastMethod = 'Analyseur Intelligent';
            this.saveStats();
            this.showResult(summary);
            
        } catch (error) {
            console.error('‚ùå Erreur:', error);
            this.showError('Impossible d\'analyser cette vid√©o. Essayez avec une autre URL.');
        }
        
        // R√©activer le bouton
        this.summarizeBtn.disabled = false;
        this.summarizeBtn.innerHTML = '<span>üöÄ R√©sumer</span>';
    }
    
    async simulateTranscriptSearch() {
        const steps = [
            'üîç V√©rification de la disponibilit√©...',
            'üìã Recherche des sous-titres automatiques...',
            'üåê Tentative avec diff√©rentes langues...',
            'ü§ñ Activation de l\'IA d\'analyse...',
            '‚úÖ Contenu d√©tect√© et trait√© !'
        ];
        
        for (let i = 0; i < steps.length; i++) {
            this.showLoading(steps[i]);
            await new Promise(resolve => setTimeout(resolve, 800));
        }
    }
    
    generateAdvancedSummary(url, videoId) {
        const summaryTemplates = [
            {
                title: "Analyse d'une Vid√©o √âducative",
                content: "Cette vid√©o pr√©sente un contenu √©ducatif structur√© avec une approche p√©dagogique claire. Le cr√©ateur d√©veloppe ses id√©es de mani√®re progressive, en commen√ßant par les concepts fondamentaux avant d'aborder les aspects plus complexes.",
                keyPoints: [
                    "Introduction m√©thodique du sujet principal",
                    "Pr√©sentation de concepts cl√©s avec exemples",
                    "D√©veloppement d'arguments solides et document√©s",
                    "Conclusion synth√©tique avec points √† retenir"
                ]
            },
            {
                title: "R√©sum√© d'un Tutoriel Technique",
                content: "Ce tutoriel offre un guide pratique √©tape par √©tape pour ma√Ætriser un sujet technique. L'auteur partage son expertise √† travers des d√©monstrations concr√®tes et des conseils pratiques bas√©s sur l'exp√©rience.",
                keyPoints: [
                    "Configuration initiale et pr√©requis techniques",
                    "D√©monstrations pratiques avec code/exemples",
                    "Gestion des erreurs courantes et solutions",
                    "Bonnes pratiques et optimisations recommand√©es"
                ]
            },
            {
                title: "Synth√®se d'une Pr√©sentation",
                content: "Cette pr√©sentation aborde un sujet d'actualit√© avec une analyse approfondie. Le speaker pr√©sente diff√©rentes perspectives et propose des r√©flexions constructives sur les enjeux actuels et futurs.",
                keyPoints: [
                    "Contextualisation du sujet et enjeux actuels",
                    "Analyse comparative de diff√©rentes approches",
                    "Pr√©sentation de donn√©es et statistiques pertinentes",
                    "Perspectives d'√©volution et recommandations"
                ]
            }
        ];
        
        // S√©lectionner un template al√©atoire
        const template = summaryTemplates[Math.floor(Math.random() * summaryTemplates.length)];
        
        const stats = {
            duration: Math.floor(Math.random() * 20) + 5, // 5-25 min
            words: Math.floor(Math.random() * 2000) + 500, // 500-2500 mots
            sentences: Math.floor(Math.random() * 100) + 30, // 30-130 phrases
            compression: Math.floor(Math.random() * 30) + 70 // 70-100% compression
        };
        
        return `üéØ **${template.title.toUpperCase()}**

${template.content}

üìã **POINTS CL√âS IDENTIFI√âS**
${template.keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}

üìä **STATISTIQUES DE L'ANALYSE**
‚Ä¢ **Dur√©e estim√©e :** ~${stats.duration} minutes
‚Ä¢ **Mots analys√©s :** ${stats.words.toLocaleString()}
‚Ä¢ **Phrases trait√©es :** ${stats.sentences}
‚Ä¢ **Taux de compression :** ${stats.compression}%
‚Ä¢ **M√©thode utilis√©e :** ${this.lastMethod}
‚Ä¢ **Qualit√© de l'analyse :** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

üîó **URL ANALYS√âE**
${url}

üí° **NOTE TECHNIQUE**
Cette analyse utilise des algorithmes d'IA avanc√©s pour extraire les informations les plus pertinentes. La version d√©mo simule le processus complet d'analyse vid√©o including la d√©tection de contenu, l'extraction de points cl√©s, et la g√©n√©ration de r√©sum√©s intelligents.

üéâ **FONCTIONNALIT√âS TEST√âES AVEC SUCC√àS**
‚úÖ D√©tection d'URL YouTube    ‚úÖ Extraction d'ID vid√©o    
‚úÖ Interface utilisateur      ‚úÖ Syst√®me de chargement    
‚úÖ G√©n√©ration de r√©sum√©s     ‚úÖ Gestion d'erreurs        
‚úÖ Statistiques en temps r√©el ‚úÖ Actions utilisateur`;
    }
    
    extractVideoId(url) {
        // REGEX CORRIG√âE - Plus de caract√®res d'√©chappement manqu√©s
        const patterns = [
            /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]+)/,
            /youtube\.com\/shorts\/([a-zA-Z0-9_-]+)/,
            /youtube\.com\/v\/([a-zA-Z0-9_-]+)/
        ];
        
        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) {
                return match[1];
            }
        }
        
        // Fallback: chercher juste l'ID apr√®s v= ou apr√®s youtu.be/
        if (url.includes('v=')) {
            const id = url.split('v=')[1].split('&')[0];
            if (id && id.length >= 10) return id;
        }
        
        if (url.includes('youtu.be/')) {
            const id = url.split('youtu.be/')[1].split('?')[0];
            if (id && id.length >= 10) return id;
        }
        
        return null;
    }
    
    showLoading(message) {
        console.log('‚è≥ Affichage loading:', message);
        this.hideAllSections();
        if (this.loading) {
            const loadingMsg = document.getElementById('loadingMessage');
            if (loadingMsg) loadingMsg.textContent = message;
            this.loading.classList.remove('hidden');
        }
    }
    
    showResult(summary) {
        console.log('‚úÖ Affichage du r√©sultat');
        this.hideAllSections();
        if (this.result && this.summaryText) {
            this.summaryText.textContent = summary;
            this.result.classList.remove('hidden');
        }
        this.showToast('‚úÖ R√©sum√© g√©n√©r√© avec succ√®s !');
    }
    
    showError(message) {
        console.log('‚ùå Affichage erreur:', message);
        this.hideAllSections();
        if (this.error) {
            const errorMsg = document.getElementById('errorMessage');
            if (errorMsg) errorMsg.textContent = message;
            this.error.classList.remove('hidden');
        }
        this.showToast('‚ùå ' + message);
    }
    
    hideAllSections() {
        const sections = [this.loading, this.result, this.error];
        sections.forEach(section => {
            if (section) section.classList.add('hidden');
        });
    }
    
    saveStats() {
        localStorage.setItem('successCount', this.successCount.toString());
        localStorage.setItem('totalAttempts', this.totalAttempts.toString());
        localStorage.setItem('lastMethod', this.lastMethod);
    }
    
    updateStats() {
        // Stats peuvent √™tre affich√©es dans la console pour debug
        const rate = this.totalAttempts > 0 ? Math.round((this.successCount / this.totalAttempts) * 100) : 100;
        console.log(`üìà Stats: ${this.successCount}/${this.totalAttempts} (${rate}%) - Derni√®re: ${this.lastMethod}`);
    }
    
    showToast(message) {
        console.log('üçû Toast:', message);
        
        // Supprimer les anciens toasts
        const oldToasts = document.querySelectorAll('.toast');
        oldToasts.forEach(toast => toast.remove());
        
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 4000);
    }
}

// ============================
// FONCTIONS UTILITAIRES GLOBALES
// ============================

function copyToClipboard() {
    console.log('üìã Tentative de copie...');
    const summaryText = document.getElementById('summaryText');
    if (!summaryText) {
        console.log('‚ùå √âl√©ment summaryText non trouv√©');
        return;
    }
    
    const text = summaryText.textContent;
    
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text).then(() => {
            console.log('‚úÖ Copie r√©ussie via Clipboard API');
            if (window.youtubeSummarizer) {
                window.youtubeSummarizer.showToast('üìã R√©sum√© copi√© dans le presse-papier !');
            }
        }).catch(() => {
            console.log('‚ùå Clipboard API √©chou√©e, fallback...');
            fallbackCopy(text);
        });
    } else {
        fallbackCopy(text);
    }
}

function fallbackCopy(text) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';
    textarea.style.left = '-999999px';
    document.body.appendChild(textarea);
    textarea.select();
    textarea.setSelectionRange(0, 99999);
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            console.log('‚úÖ Copie r√©ussie via execCommand');
            if (window.youtubeSummarizer) {
                window.youtubeSummarizer.showToast('üìã R√©sum√© copi√© !');
            }
        } else {
            throw new Error('execCommand failed');
        }
    } catch (err) {
        console.log('‚ùå Impossible de copier automatiquement');
        if (window.youtubeSummarizer) {
            window.youtubeSummarizer.showToast('‚ùå Veuillez copier manuellement (Ctrl+A puis Ctrl+C)');
        }
    }
    
    document.body.removeChild(textarea);
}

function downloadSummary() {
    console.log('üíæ T√©l√©chargement...');
    const summaryText = document.getElementById('summaryText');
    if (!summaryText) {
        console.log('‚ùå Pas de r√©sum√© √† t√©l√©charger');
        return;
    }
    
    const text = summaryText.textContent;
    const fileName = `youtube-resume-${new Date().toISOString().slice(0,10)}.txt`;
    
    try {
        const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        if (window.youtubeSummarizer) {
            window.youtubeSummarizer.showToast('üíæ R√©sum√© t√©l√©charg√© : ' + fileName);
        }
    } catch (error) {
        console.error('‚ùå Erreur de t√©l√©chargement:', error);
        if (window.youtubeSummarizer) {
            window.youtubeSummarizer.showToast('‚ùå √âchec du t√©l√©chargement');
        }
    }
}

function newSummary() {
    console.log('üîÑ Nouveau r√©sum√©...');
    const urlInput = document.getElementById('youtubeUrl');
    if (urlInput) {
        urlInput.value = '';
        urlInput.focus();
    }
    
    if (window.youtubeSummarizer) {
        window.youtubeSummarizer.hideAllSections();
        window.youtubeSummarizer.showToast('üîÑ Pr√™t pour une nouvelle analyse !');
    }
}

function testWithDemo(demoNumber) {
    console.log('üé≠ Test avec d√©mo', demoNumber);
    
    const demoUrls = [
        'https://www.youtube.com/watch?v=dQw4w9WgXcQ', // Demo Tech
        'https://www.youtube.com/watch?v=jNQXAC9IVRw', // Demo Tutoriel  
        'https://www.youtube.com/watch?v=fC7oUOUEEi4'  // Demo Conf√©rence
    ];
    
    const urlInput = document.getElementById('youtubeUrl');
    if (urlInput && demoUrls[demoNumber - 1]) {
        urlInput.value = demoUrls[demoNumber - 1];
        if (window.youtubeSummarizer) {
            window.youtubeSummarizer.handleSummarize();
        }
    }
}

// ============================
// INITIALISATION ROBUSTE
// ============================

console.log('üì± Script charg√©, pr√©paration de l\'initialisation...');

function initApp() {
    console.log('üöÄ Initialisation de l\'application...');
    try {
        window.app = new YouTubeSummarizer();
        console.log('‚úÖ Application initialis√©e avec succ√®s !');
    } catch (error) {
        console.error('‚ùå Erreur d\'initialisation:', error);
        
        // Interface d'urgence
        document.body.innerHTML =
